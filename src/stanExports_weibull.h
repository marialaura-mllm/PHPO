// Generated by rstantools.  Do not edit by hand.

/*
    PHPO is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    PHPO is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with PHPO.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_weibull_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_weibull");
    reader.add_event(0, 0, "include", "/chunks/logliks.stan");
    reader.add_event(0, 0, "start", "/chunks/logliks.stan");
    reader.add_event(21, 21, "end", "/chunks/logliks.stan");
    reader.add_event(21, 1, "restart", "model_weibull");
    reader.add_event(98, 76, "end", "model_weibull");
    return reader;
}
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
loglik_weibull(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& H0t,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& ht,
                   const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& status, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 5;
        validate_non_negative_index("loglik", "num_elements(status)", num_elements(status));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> loglik(num_elements(status));
        stan::math::initialize(loglik, DUMMY_VAR__);
        stan::math::fill(loglik, DUMMY_VAR__);
        current_statement_begin__ = 7;
        for (int i = 1; i <= num_elements(status); ++i) {
            current_statement_begin__ = 7;
            stan::model::assign(loglik, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        ((get_base1(status, i, "status", 1) * stan::math::log(get_base1(ht, i, "ht", 1))) - get_base1(H0t, i, "H0t", 1)), 
                        "assigning variable loglik");
        }
        current_statement_begin__ = 9;
        return stan::math::promote_scalar<fun_return_scalar_t__>(loglik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct loglik_weibull_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& H0t,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& ht,
                   const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& status, std::ostream* pstream__) const {
        return loglik_weibull(H0t, ht, status, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1>
loglik_weibull_PO(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& H0t,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& h0t,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& status,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& lambda_PO, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 14;
        validate_non_negative_index("loglik", "num_elements(status)", num_elements(status));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> loglik(num_elements(status));
        stan::math::initialize(loglik, DUMMY_VAR__);
        stan::math::fill(loglik, DUMMY_VAR__);
        current_statement_begin__ = 16;
        for (int i = 1; i <= num_elements(status); ++i) {
            current_statement_begin__ = 16;
            stan::model::assign(loglik, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        ((get_base1(status, i, "status", 1) * stan::math::log(((get_base1(lambda_PO, i, "lambda_PO", 1) * get_base1(h0t, i, "h0t", 1)) / (stan::math::exp(-(get_base1(H0t, i, "H0t", 1))) + (get_base1(lambda_PO, i, "lambda_PO", 1) * (1 - stan::math::exp(-(get_base1(H0t, i, "H0t", 1))))))))) + stan::math::log((1 / (1 + (get_base1(lambda_PO, i, "lambda_PO", 1) * ((1 - stan::math::exp(-(get_base1(H0t, i, "H0t", 1)))) / stan::math::exp(-(get_base1(H0t, i, "H0t", 1))))))))), 
                        "assigning variable loglik");
        }
        current_statement_begin__ = 18;
        return stan::math::promote_scalar<fun_return_scalar_t__>(loglik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct loglik_weibull_PO_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& H0t,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& h0t,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& status,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& lambda_PO, std::ostream* pstream__) const {
        return loglik_weibull_PO(H0t, h0t, status, lambda_PO, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_weibull : public prob_grad {
private:
        int n;
        int p;
        matrix_d x;
        vector_d time;
        double tau;
        vector_d status;
        int approach;
        int type;
        double a_lambda;
        double b_lambda;
        double a_gamma;
        double b_gamma;
        double mu_beta;
        double sigma_beta;
public:
    model_weibull(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_weibull(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_weibull_namespace::model_weibull";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            check_greater_or_equal(function__, "p", p, 1);
            current_statement_begin__ = 27;
            validate_non_negative_index("x", "n", n);
            validate_non_negative_index("x", "p", p);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(n,p));
            x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, p);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_2_max__ = p;
            size_t x_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 28;
            validate_non_negative_index("time", "n", n);
            context__.validate_dims("data initialization", "time", "vector_d", context__.to_vec(n));
            time = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < time_j_1_max__; ++j_1__) {
                time(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "time", time, 0);
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "tau", "double", context__.to_vec());
            tau = double(0);
            vals_r__ = context__.vals_r("tau");
            pos__ = 0;
            tau = vals_r__[pos__++];
            check_greater_or_equal(function__, "tau", tau, 0);
            current_statement_begin__ = 30;
            validate_non_negative_index("status", "n", n);
            context__.validate_dims("data initialization", "status", "vector_d", context__.to_vec(n));
            status = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("status");
            pos__ = 0;
            size_t status_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < status_j_1_max__; ++j_1__) {
                status(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "status", status, 0);
            check_less_or_equal(function__, "status", status, 1);
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "approach", "int", context__.to_vec());
            approach = int(0);
            vals_i__ = context__.vals_i("approach");
            pos__ = 0;
            approach = vals_i__[pos__++];
            check_greater_or_equal(function__, "approach", approach, 0);
            check_less_or_equal(function__, "approach", approach, 1);
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "type", "int", context__.to_vec());
            type = int(0);
            vals_i__ = context__.vals_i("type");
            pos__ = 0;
            type = vals_i__[pos__++];
            check_greater_or_equal(function__, "type", type, 0);
            check_less_or_equal(function__, "type", type, 1);
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "a_lambda", "double", context__.to_vec());
            a_lambda = double(0);
            vals_r__ = context__.vals_r("a_lambda");
            pos__ = 0;
            a_lambda = vals_r__[pos__++];
            check_greater_or_equal(function__, "a_lambda", a_lambda, 0);
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "b_lambda", "double", context__.to_vec());
            b_lambda = double(0);
            vals_r__ = context__.vals_r("b_lambda");
            pos__ = 0;
            b_lambda = vals_r__[pos__++];
            check_greater_or_equal(function__, "b_lambda", b_lambda, 0);
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "a_gamma", "double", context__.to_vec());
            a_gamma = double(0);
            vals_r__ = context__.vals_r("a_gamma");
            pos__ = 0;
            a_gamma = vals_r__[pos__++];
            check_greater_or_equal(function__, "a_gamma", a_gamma, 0);
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "b_gamma", "double", context__.to_vec());
            b_gamma = double(0);
            vals_r__ = context__.vals_r("b_gamma");
            pos__ = 0;
            b_gamma = vals_r__[pos__++];
            check_greater_or_equal(function__, "b_gamma", b_gamma, 0);
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "mu_beta", "double", context__.to_vec());
            mu_beta = double(0);
            vals_r__ = context__.vals_r("mu_beta");
            pos__ = 0;
            mu_beta = vals_r__[pos__++];
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "sigma_beta", "double", context__.to_vec());
            sigma_beta = double(0);
            vals_r__ = context__.vals_r("sigma_beta");
            pos__ = 0;
            sigma_beta = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_beta", sigma_beta, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 46;
            num_params_r__ += 1;
            current_statement_begin__ = 47;
            num_params_r__ += 1;
            current_statement_begin__ = 48;
            validate_non_negative_index("beta", "p", p);
            num_params_r__ += p;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_weibull() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 46;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda", "double", context__.to_vec());
        double lambda(0);
        lambda = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "gamma", "double", context__.to_vec());
        double gamma(0);
        gamma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, gamma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 48;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "p", p);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(p));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(p);
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 46;
            local_scalar_t__ lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.scalar_lb_constrain(0, lp__);
            else
                lambda = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 47;
            local_scalar_t__ gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.scalar_lb_constrain(0, lp__);
            else
                gamma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 48;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(p, lp__);
            else
                beta = in__.vector_constrain(p);
            // transformed parameters
            current_statement_begin__ = 53;
            local_scalar_t__ lambda_transf;
            (void) lambda_transf;  // dummy to suppress unused var warning
            stan::math::initialize(lambda_transf, DUMMY_VAR__);
            stan::math::fill(lambda_transf, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 55;
            stan::math::assign(lambda_transf, (lambda * pow(tau, gamma)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 53;
            if (stan::math::is_uninitialized(lambda_transf)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: lambda_transf";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_transf: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "lambda_transf", lambda_transf, 0);
            // model body
            {
            current_statement_begin__ = 62;
            validate_non_negative_index("H0t", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> H0t(n);
            stan::math::initialize(H0t, DUMMY_VAR__);
            stan::math::fill(H0t, DUMMY_VAR__);
            current_statement_begin__ = 63;
            validate_non_negative_index("ht", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ht(n);
            stan::math::initialize(ht, DUMMY_VAR__);
            stan::math::fill(ht, DUMMY_VAR__);
            current_statement_begin__ = 64;
            validate_non_negative_index("h0t", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> h0t(n);
            stan::math::initialize(h0t, DUMMY_VAR__);
            stan::math::fill(h0t, DUMMY_VAR__);
            current_statement_begin__ = 65;
            validate_non_negative_index("lambda_PO", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_PO(n);
            stan::math::initialize(lambda_PO, DUMMY_VAR__);
            stan::math::fill(lambda_PO, DUMMY_VAR__);
            current_statement_begin__ = 67;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 68;
                stan::model::assign(H0t, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((lambda_transf * stan::math::exp((gamma * stan::math::log(get_base1(time, i, "time", 1))))) * stan::math::exp(multiply(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"), beta))), 
                            "assigning variable H0t");
                current_statement_begin__ = 69;
                stan::model::assign(ht, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (((lambda_transf * gamma) * stan::math::exp(((gamma - 1) * stan::math::log(get_base1(time, i, "time", 1))))) * stan::math::exp(multiply(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"), beta))), 
                            "assigning variable ht");
                current_statement_begin__ = 70;
                stan::model::assign(h0t, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((lambda_transf * gamma) * stan::math::exp(((gamma - 1) * stan::math::log(get_base1(time, i, "time", 1))))), 
                            "assigning variable h0t");
                current_statement_begin__ = 71;
                stan::model::assign(lambda_PO, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(multiply(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"), beta)), 
                            "assigning variable lambda_PO");
            }
            current_statement_begin__ = 74;
            if (as_bool(logical_eq(type, 0))) {
                {
                current_statement_begin__ = 75;
                validate_non_negative_index("loglik", "num_elements(status)", num_elements(status));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> loglik(num_elements(status));
                stan::math::initialize(loglik, DUMMY_VAR__);
                stan::math::fill(loglik, DUMMY_VAR__);
                current_statement_begin__ = 76;
                stan::math::assign(loglik, loglik_weibull(H0t, ht, status, pstream__));
                current_statement_begin__ = 77;
                lp_accum__.add(sum(loglik));
                }
            }
            current_statement_begin__ = 79;
            if (as_bool(logical_eq(type, 1))) {
                {
                current_statement_begin__ = 80;
                validate_non_negative_index("loglik", "num_elements(status)", num_elements(status));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> loglik(num_elements(status));
                stan::math::initialize(loglik, DUMMY_VAR__);
                stan::math::fill(loglik, DUMMY_VAR__);
                current_statement_begin__ = 81;
                stan::math::assign(loglik, loglik_weibull_PO(H0t, h0t, status, lambda_PO, pstream__));
                current_statement_begin__ = 82;
                lp_accum__.add(sum(loglik));
                }
            }
            current_statement_begin__ = 85;
            if (as_bool(logical_eq(approach, 1))) {
                current_statement_begin__ = 87;
                lp_accum__.add(gamma_log<propto__>(lambda, a_lambda, b_lambda));
                current_statement_begin__ = 88;
                lp_accum__.add(gamma_log<propto__>(gamma, a_gamma, b_gamma));
                current_statement_begin__ = 89;
                lp_accum__.add(normal_log<propto__>(beta, mu_beta, sigma_beta));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lambda");
        names__.push_back("gamma");
        names__.push_back("beta");
        names__.push_back("lambda_transf");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_weibull_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lambda = in__.scalar_lb_constrain(0);
        vars__.push_back(lambda);
        double gamma = in__.scalar_lb_constrain(0);
        vars__.push_back(gamma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(p);
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 53;
            double lambda_transf;
            (void) lambda_transf;  // dummy to suppress unused var warning
            stan::math::initialize(lambda_transf, DUMMY_VAR__);
            stan::math::fill(lambda_transf, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 55;
            stan::math::assign(lambda_transf, (lambda * pow(tau, gamma)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 53;
            check_greater_or_equal(function__, "lambda_transf", lambda_transf, 0);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(lambda_transf);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_weibull";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_transf";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_transf";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_weibull_namespace::model_weibull stan_model;
#endif
